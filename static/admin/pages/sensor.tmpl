<div class="row">
    
    <div class="col 12 m4 l4">
        <div class="marjen z-depth-1">
            <div class="row">
                <h5>Add Service</h5>
                <h5>{{ .Sensor.ApiKey }}</h5>
            </div>

            <div class="row">

                <div class="input-field col s8 m8 l8">
                    <select id="service-type" name="type">
                        <option value="" disabled selected>---</option>
                        <option value="telnet">Telnet</option>
                        <option value="ftp">FTP</option>
                        <option value="ssh">SSH</option>
                    </select>
                </div>
                
                <div class="input-field col s4 m4 l4">
                    <button class="center aligned btn-floating waves-effect waves-light teal lighten-1" onclick="modalPop()">
                        <i class="material-icons">add</i>
                    </button>
                </div>

            </div>

        </div>

        <br>
        <div class="divider"></div>
        <br>

        <div class="marjen z-depth-1">
            <div class="row">
                <h5>Assigned Team</h5>
                <h5>{{ .Sensor.ApiKey }}</h5>
            </div>

            <div class="row">

                <div class="input-field col s8 m8 l8">
                    <select id="service-type" name="type">
                        <option value="{{ .Sensor.TeamID }}" selected>--current team---</option>
                    </select>
                </div>

                <div class="input-field col">
                    <button class="btn-floating waves-effect waves-light teal lighten-1" onclick="modalPop()">
                        <i class="material-icons">save</i>
                    </button>
                </div>

            </div>

        </div>
    </div>

    <div class="col s12 m8 l8">
            <div class="marjen z-depth-1">
                <h5>Services List</h5>
                <table id="service-table" class="striped">
                    <thead>
                        <tr>
                            <th>Port</th>
                            <th>Type</th>
                            <th>Configure</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody id="services-tbody">
                    {{ if len .SensorServices }}
                    {{ range $key, $service := .Sensor.Cfgs }}
                            <tr id="service-id-{{ $service.ServiceID}}">
                                <td>{{ $service.Port }}</td>
                                <td>{{ $service.Type }}</td>
                                <td><a class="btn-floating waves-effect waves-light teal lighten-1" onclick="updateServiceModal( {{ $service }} )"><i class="material-icons">input</i></a></td>
                                <td><a class="btn-floating waves-effect waves-light teal lighten-1" onclick="deleteServiceModal( {{ $service }} )"><i class="material-icons">delete_sweep</i></a></td>
                            </tr>
                    {{ end }}
                    {{ end }}
                    </tbody>
                </table>
            </div>
    </div>

    <input hidden id="sensor_id" type="text" name="sensor_id" value="{{ .Sensor.ID }}" disabled class="validate">

    <!-- Delete Modal Structures -->
    <div id="delete-service-modal" class="modal-gap modal">
        <div class="modal-content">

                <div class="row">
                    <h5 class="col">Do you want to delete the following service?</h5>
                </div>

                <div class="row">
                    <div class="input-field col">
                        <button id="delete-service-modal-no"  class="waves-effect waves-light teal lighten-1 btn">Cancel</button>
                        <button id="delete-service-modal-yes" class="waves-effect waves-light red lighten-1 btn">Delete</button>
                    </div>
                </div>

        </div>
    </div>

    <!-- Telnet Modal Structures -->
    <div id="telnet-modal" class="modal-gap modal">
        <div class="modal-content">

                <div class="row">
                    <h5 class="col">Add Telnet Service</h5>
                </div>

                <div class="row">
                    <div class="input-field col s2">
                        <input id="telnet-port" type="text" name="telnet-port" value="" required class="validate">
                        <label for="telnet-port" data-error="example: telnet, ssh, ftp" data-success="valid">Port</label>
                    </div>
                </div>
        
                <div class="row">
                    <div class="input-field col">
                        <select id="telnet-emulate" name="telnet-emulate">
                            <option value="" disabled selected>---</option>
                            <option value="basic">basic</option>
                        </select>
                        <label for="emulate" data-error="example: Basic, Complex" data-success="valid">What kind of telnet server should we emulate?</label>
                    </div>
                </div>

                <div class="row">
                    <div class="input-field col">
                        <button onclick="post('telnet')" class="waves-effect waves-light teal lighten-1 btn">Submit</button>
                    </div>
                </div>

        </div>
    </div>

    <div id="delete-service-modal" class="modal-gap modal">
        <div class="modal-content">
        </div>
    </div>

</div>

<script>


    var uri = "{{ .URI }}/kushtaka/service/";

    document.addEventListener('DOMContentLoaded', function() {
        var elems = document.querySelectorAll('.modal');
        var instances = M.Modal.init(elems, {});
    });

    $(document).ready(function(){
        $('select').formSelect();
    });

    function cancelDelete(id) {
        var modalElement = document.getElementById("delete-service-modal");
        var instance = M.Modal.getInstance(modalElement);
        instance.close();
    }

    function deleteService(obj) {
        deleteData(obj, uri);
        var id = "service-id-" + obj.serviceId.toString();
        document.getElementById(id).remove();
    }


    function modalPop() {
        var el = document.getElementById("service-type");
        var type = el.options[el.selectedIndex].value;

        modalType = type + "-modal"; 
        var modalElement = document.getElementById(modalType);
        var instance = M.Modal.getInstance(modalElement);
        instance.open();
    }

    function deleteServiceModal(id) {
        var modalElement = document.getElementById("delete-service-modal");
        var instance = M.Modal.getInstance(modalElement);

        document.getElementById("delete-service-modal-no").onclick = function() {cancelDelete(id)};
        document.getElementById("delete-service-modal-yes").onclick = function() { deleteService(id)};

        instance.open();

    }

    function post(type) {
        if (type == "telnet") {
            postTelnet(type);
        }
    }

    function postTelnet(type) {
        var sid = parseInt(document.getElementById("sensor_id").value);
        var telp = parseInt(document.getElementById("telnet-port").value);
        var el = document.getElementById("telnet-emulate");
        var telem = el.options[el.selectedIndex].value;
        var url = uri + sid + "/type/telnet";
        var data = {sensorId: sid , type: type, port: telp, emulate: telem};
        postData(data, url, type);
    }

    function addServiceRow(obj) {
        let json = JSON.stringify(obj);
        console.log(json);
        let tmpl = `
            <tr id="service-id-${obj.ID}">
                <td>${obj.port}</td>
                <td>${obj.type}</td>
                <td><a class="btn-floating waves-effect waves-light teal lighten-1" onclick='updateServiceModal(${json})'><i class="material-icons">input</i></a></td>
                <td><a class="btn-floating waves-effect waves-light teal lighten-1" onclick='deleteServiceModal(${json})'><i class="material-icons">delete_sweep</i></a></td>
            </tr>
        `;
        $('#service-table > tbody:last-child').append(tmpl);
    }

    function respTelnet(resp) {
        modalType = "telnet-modal"; 
        var modalElement = document.getElementById(modalType);
        var instance = M.Modal.getInstance(modalElement);

        if (resp.Status === "success") {
            document.getElementById("telnet-port").value = "";
            document.getElementById("telnet-emulate").selectedIndex = 0; 
            addServiceRow(resp.Service);
            M.toast({html: resp.Message , classes: 'green lighten-1'})
            instance.close();
        } else {
            M.toast({html: resp.Message , classes: 'red lighten-1'})
        }
    }

    function errc(err) {
        M.toast({html: err, classes: 'green lighten-1'})
        console.error('Error:', err);
    }

    function postData(data, url, type) {
        fetch(url, {
        method: 'POST', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{
            'Content-Type': 'application/json'
        }
        }).then(res => res.json())
        .then(response => respTelnet(response))
        .catch(error => errc(error));
    }

    function respDeleteService(modalType, resp) {
        var modalElement = document.getElementById(modalType);
        var instance = M.Modal.getInstance(modalElement);

        if (resp.Status === "success") {
            M.toast({html: resp.Message , classes: 'green lighten-1'})
            instance.close();
        } else {
            M.toast({html: resp.Message , classes: 'red lighten-1'})
        }
    }

    function deleteData(data, url) {
        fetch(url, {
        method: 'DELETE', // or 'PUT'
        body: JSON.stringify(data), // data can be `string` or {object}!
        headers:{
            'Content-Type': 'application/json'
        }
        }).then(res => res.json())
        .then(response => respDeleteService("delete-service-modal", response))
        .catch(error => errc(error));
    }

</script>